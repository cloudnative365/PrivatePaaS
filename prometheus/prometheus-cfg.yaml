---
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: prometheus
  name: prometheus-config
  namespace: kube-system
data:
  prometheus.yml: |
    # A scrape configuration for running Prometheus on a Kubernetes cluster.
    # This uses separate scrape configs for cluster components (i.e. API server, node)
    # and services to allow each to use different authentication configs.
    #
    # Kubernetes labels will be added as Prometheus labels on metrics via the
    # `labelmap` relabeling action.
    #
    # If you are using Kubernetes 1.7.2 or earlier, please take note of the comments
    # for the kubernetes-cadvisor job; you will need to edit or remove this job.

    # Scrape config for API servers.
    #
    # Kubernetes exposes API servers as endpoints to the default/kubernetes
    # service so this uses `endpoints` role and uses relabelling to only keep
    # the endpoints associated with the default/kubernetes service using the
    # default named port `https`. This works for single API server deployments as
    # well as HA API server deployments.
    global:
      scrape_interval: 15s
      #scrape_timeout: 10s
      evaluation_interval: 10s

    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
           - 10.210.55.190:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
       - "*.rule"


    scrape_configs:
    - job_name: 'kubernetes-apiservers'

      kubernetes_sd_configs:
      - role: endpoints

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # If your node certificates are self-signed or use a different CA to the
        # master CA, then disable certificate verification below. Note that
        # certificate verification is an integral part of a secure infrastructure
        # so this should only be disabled in a controlled environment. You can
        # disable certificate verification by uncommenting the line below.
        #
        # insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      # Keep only the default/kubernetes service endpoints for the https port. This
      # will add targets for each API server which Kubernetes adds an endpoint to
      # the default/kubernetes service.
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    # Scrape config for nodes (kubelet).
    #
    # Rather than connecting directly to the node, the scrape is proxied though the
    # Kubernetes apiserver.  This means it will work if Prometheus is running out of
    # cluster, or can't connect to nodes for some other reason (e.g. because of
    # firewalling).
    - job_name: 'kubernetes-nodes'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    # Scrape config for Kubelet cAdvisor.
    #
    # This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics
    # (those whose names begin with 'container_') have been removed from the
    # Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to
    # retrieve those metrics.
    #
    # In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor
    # HTTP endpoint; use "replacement: /api/v1/nodes/${1}:4194/proxy/metrics"
    # in that case (and ensure cAdvisor's HTTP server hasn't been disabled with
    # the --cadvisor-port=0 Kubelet flag).
    #
    # This job is not necessary and should be removed in Kubernetes 1.6 and
    # earlier versions, or it will cause the metrics to be scraped twice.
    - job_name: 'kubernetes-cadvisor'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

    # Scrape config for service endpoints.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
    # to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the
    # service then set this appropriately.
    - job_name: 'kubernetes-service-endpoints'

      kubernetes_sd_configs:
      - role: endpoints

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

    # Example scrape config for pods
    #
    # The relabeling allows the actual pod scrape endpoint to be configured via the
    # following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the
    # pod's declared ports (default is a port-free target if none are declared).
    - job_name: 'kubernetes-pods'
      # if you want to use metrics on jobs, set the below field to
      # true to prevent Prometheus from setting the `job` label
      # automatically.
      honor_labels: false
      kubernetes_sd_configs:
      - role: pod
      # skip verification so you can do HTTPS to pods
      tls_config:
        insecure_skip_verify: true
      # make sure your labels are in order
      relabel_configs:
      # these labels tell Prometheus to automatically attach source
      # pod and namespace information to each collected sample, so
      # that they'll be exposed in the custom metrics API automatically.
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # these labels tell Prometheus to look for
      # prometheus.io/{scrape,path,port} annotations to configure
      # how to scrape
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (.+)

    - job_name: 'node-exporter'
      static_configs:
      - targets: ['10.210.55.190:9100','10.210.55.192:9100','10.210.55.193:9100','10.210.55.194:9100','10.210.55.195:9100','10.210.55.196:9100','10.210.55.197:9100','10.210.55.198:9100']

---
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: prometheus
  name: prometheus-config-rule
  namespace: kube-system
data:
  OS.rule: |
    groups:
    - name: OS
      rules:

       # Alert for any instance that is unreachable for >5 minutes.
       # function a() {    $(a) ; }
       # a &
      - alert: MemoryUsage
        expr: (((node_memory_MemTotal_bytes-node_memory_MemAvailable_bytes)/node_memory_MemTotal_bytes) * 100) > 70
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "Memory of instance {{ $labels.instance }} is not enough"
          description: "Memory usage of {{ $labels.instance }} is too much for more than 1 minutes. (current value: {{ $value }}%"    
    
      # Alert for any instance that is unreachable for >5 minutes.
      # use "cat /dev/urandom | md5sum" to for CPU working with 100%
      - alert: CPUUsage
        expr: round((1 - avg(irate(node_cpu_seconds_total{mode="idle"}[10m])) by (instance)) * 100) > 80
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "CPU usage of instance {{ $labels.instance }} is too hight"
          description: "CPU usage of {{ $labels.instance }} is too much for more than 1 minutes. (current value: {{ $value }}%"
    
      # Alert for any instance that has a median request latency >1s.
      # dd if=/dev/zero of=test bs=1024M count=40
      - alert: RootfsUsage
        expr: round((node_filesystem_size_bytes{device="rootfs"}-node_filesystem_free_bytes{device="rootfs"})/node_filesystem_size_bytes{device="rootfs"} * 100) > 80
        for: 30s
        labels:
          serverity: warning
        annotations:
          summary: "Not enough space for root fs on {{ $labels.instance }}"
          description: "Not enough space for root fs on {{ $labels.instance }}. (current value: {{ $value }})%"

      - alert: ProcessNodeExporter
        expr: node_systemd_unit_state{name="node_exporter.service",state="active"} == 0
        for: 15s
        labels:
          serverity: critical
        annotations:
          summary: "Node Exporter on {{ $labels.instance }} is not running"
          description: "Node Exporter on {{ $labels.instance }} is not running"


      - alert: ProcessDocker
        expr: node_systemd_unit_state{name="docker.service",state="active"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "service {{ $labels.name }} on {{ $labels.instance }} is down"
          description: "service {{ $labels.name }} on {{ $labels.instance }} is down"

      - alert: ProcessKubelet
        expr: node_systemd_unit_state{name="kubelet.service",state="active"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "service {{ $labels.name }} on {{ $labels.instance }} is down"
          description: "service {{ $labels.name }} on {{ $labels.instance }} is down"

      - alert: ProcessETCD
        expr: node_systemd_unit_state{name="etcd_container.service",state="active"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "service {{ $labels.name }} on {{ $labels.instance }} is down"
          description: "service {{ $labels.name }} on {{ $labels.instance }} is down"

      - alert: PodCalicoController
        expr: kube_pod_container_status_running{container="calico-kube-controllers"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodCalicoNode
        expr: kube_pod_container_status_running{container="calico-node"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodKubeApiserver
        expr: kube_pod_container_status_running{container="kube-apiserver"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodKubeScheduler
        expr: kube_pod_container_status_running{container="kube-scheduler"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodKubeControllerManager
        expr: kube_pod_container_status_running{container="kube-controller-manager"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodKubeDNS
        expr: kube_pod_container_status_running{container="kubedns"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodKubeProxy
        expr: kube_pod_container_status_running{container="kube-proxy"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"


      - alert: PodMetricsServer
        expr: kube_pod_container_status_running{container="kube-proxy"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodRbdProvisions
        expr: kube_pod_container_status_running{container="rbd-provisioner"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodTiller
        expr: kube_pod_container_status_running{container="tiller"} == 0
        for: 30s
        labels:
          severity: warining
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodFileserver
        expr: kube_pod_container_status_running{container="fileserver"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodNfsProvisions
        expr: kube_pod_container_status_running{container="nfs-provisioner"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodDefaultHttpBackend
        expr: kube_pod_container_status_running{container="default-http-backend"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodNginxIngressController
        expr: kube_pod_container_status_running{container="nginx-ingress-controller"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodKubeStateMetrics
        expr: kube_pod_container_status_running{container="kube-state-metrics"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: PodPrometheus
        expr: kube_pod_container_status_running{container="prometheus"} == 0
        for: 10s
        labels:
          severity: critical
        annotations:
          summary: "pod {{ $labels.container }} is not running"
          description: "pod {{ $labels.container }} is not running"

      - alert: NodeStatus
        expr: kube_node_status_condition{condition="Ready",status="true"} == 0
        for: 10s
        labels:
          severity: critical
        annotations:
          summary: "{{ $labels.instance }} is not in ready"
          description: "{{ $labels.instance }} is not in ready"

